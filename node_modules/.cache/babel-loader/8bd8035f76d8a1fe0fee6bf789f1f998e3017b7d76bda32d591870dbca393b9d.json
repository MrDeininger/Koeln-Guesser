{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useEffect } from \"react\";\nimport ImageContext from \"../contexts/imageContext\";\nimport ScoreContext from \"../contexts/scoreContext\";\nfunction OpenStreetCam({\n  reset\n}) {\n  _s();\n  const {\n    imageInfo,\n    setImageInfo\n  } = useContext(ImageContext);\n  const {\n    scoreInfo\n  } = useContext(ScoreContext);\n  const getRandomCoordinates = () => {\n    // Define the latitude and longitude boundaries of the rectangle\n    const latMin = 50.89588741;\n    const latMax = 50.99128564;\n    const lngMin = 6.87332153;\n    const lngMax = 7.02060699;\n\n    // Generate a random latitude and longitude within the rectangle\n    const lat = Math.random() * (latMax - latMin) + latMin;\n    const lng = Math.random() * (lngMax - lngMin) + lngMin;\n    return [lat, lng];\n  };\n  const fetchImageUrl = () => {\n    const latlng = getRandomCoordinates();\n    fetch(`https://api.openstreetcam.org/2.0/photo/?lat=${latlng[0]}&lng=${latlng[1]}&radius=500`).then(response => {\n      if (!response.ok) throw new Error(\"No image found\");\n      return response.json();\n    }).then(data => {\n      if (data.result) {\n        let numberOfImages = data.result.data.length;\n        console.log(`Found ${numberOfImages} images.`);\n        if (numberOfImages > 0) {\n          const randomIndex = Math.floor(Math.random() * (numberOfImages - 1));\n          const randomPhoto = data.result.data[randomIndex];\n          setImageInfo([randomPhoto.fileurlProc, randomPhoto.lat, randomPhoto.lng]);\n        }\n      } else {\n        console.log('No images found.');\n        fetchImageUrl();\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  useEffect(() => {\n    // Define the latitude and longitude boundaries of the rectangle\n    console.log(\"Fetching OpenStreetCam image...\");\n    fetchImageUrl();\n  }, [reset]); // Only run this code when the scoreInfo changes\n  return null; // or return your JSX here\n}\n_s(OpenStreetCam, \"pLgU4Vu5TFln2+SbvkY2OV/Rjbs=\");\n_c = OpenStreetCam;\nexport default OpenStreetCam;\nvar _c;\n$RefreshReg$(_c, \"OpenStreetCam\");","map":{"version":3,"names":["useContext","useEffect","ImageContext","ScoreContext","OpenStreetCam","reset","_s","imageInfo","setImageInfo","scoreInfo","getRandomCoordinates","latMin","latMax","lngMin","lngMax","lat","Math","random","lng","fetchImageUrl","latlng","fetch","then","response","ok","Error","json","data","result","numberOfImages","length","console","log","randomIndex","floor","randomPhoto","fileurlProc","catch","error","_c","$RefreshReg$"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kÃ¶lnguessr/cologneguessr/src/components/openstreetcam.js"],"sourcesContent":["import { useContext, useEffect } from \"react\";\r\nimport ImageContext from \"../contexts/imageContext\";\r\nimport ScoreContext from \"../contexts/scoreContext\";\r\n\r\nfunction OpenStreetCam({ reset }) {\r\n  const { imageInfo, setImageInfo } = useContext(ImageContext);\r\n  const { scoreInfo } = useContext(ScoreContext);\r\n\r\n  const getRandomCoordinates = () => {\r\n    // Define the latitude and longitude boundaries of the rectangle\r\n    const latMin = 50.89588741;\r\n    const latMax = 50.99128564;\r\n    const lngMin = 6.87332153;\r\n    const lngMax = 7.02060699;\r\n\r\n    // Generate a random latitude and longitude within the rectangle\r\n    const lat = Math.random() * (latMax - latMin) + latMin;\r\n    const lng = Math.random() * (lngMax - lngMin) + lngMin;\r\n\r\n    return [lat, lng];\r\n  };\r\n\r\n  const fetchImageUrl = () => {\r\n    const latlng = getRandomCoordinates();\r\n    fetch(\r\n      `https://api.openstreetcam.org/2.0/photo/?lat=${latlng[0]}&lng=${latlng[1]}&radius=500`\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) throw new Error(\"No image found\");\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.result) {\r\n          let numberOfImages = data.result.data.length;\r\n          console.log(`Found ${numberOfImages} images.`);\r\n          if (numberOfImages > 0) {\r\n            const randomIndex = Math.floor(\r\n              Math.random() * (numberOfImages - 1)\r\n            );\r\n            const randomPhoto = data.result.data[randomIndex];\r\n            setImageInfo([\r\n              randomPhoto.fileurlProc,\r\n              randomPhoto.lat,\r\n              randomPhoto.lng,\r\n            ]);\r\n          }\r\n        }\r\n        else {\r\n          console.log('No images found.');\r\n          fetchImageUrl();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Define the latitude and longitude boundaries of the rectangle\r\n    console.log(\"Fetching OpenStreetCam image...\");\r\n    fetchImageUrl();\r\n  }, [reset]); // Only run this code when the scoreInfo changes\r\n  return null; // or return your JSX here\r\n}\r\n\r\nexport default OpenStreetCam;\r\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7C,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,YAAY,MAAM,0BAA0B;AAEnD,SAASC,aAAaA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAChC,MAAM;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGR,UAAU,CAACE,YAAY,CAAC;EAC5D,MAAM;IAAEO;EAAU,CAAC,GAAGT,UAAU,CAACG,YAAY,CAAC;EAE9C,MAAMO,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACA,MAAMC,MAAM,GAAG,WAAW;IAC1B,MAAMC,MAAM,GAAG,WAAW;IAC1B,MAAMC,MAAM,GAAG,UAAU;IACzB,MAAMC,MAAM,GAAG,UAAU;;IAEzB;IACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIL,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IACtD,MAAMO,GAAG,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIH,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IAEtD,OAAO,CAACE,GAAG,EAAEG,GAAG,CAAC;EACnB,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,MAAM,GAAGV,oBAAoB,CAAC,CAAC;IACrCW,KAAK,CACF,gDAA+CD,MAAM,CAAC,CAAC,CAAE,QAAOA,MAAM,CAAC,CAAC,CAAE,aAC7E,CAAC,CACEE,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;MACnD,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACd,IAAIA,IAAI,CAACC,MAAM,EAAE;QACf,IAAIC,cAAc,GAAGF,IAAI,CAACC,MAAM,CAACD,IAAI,CAACG,MAAM;QAC5CC,OAAO,CAACC,GAAG,CAAE,SAAQH,cAAe,UAAS,CAAC;QAC9C,IAAIA,cAAc,GAAG,CAAC,EAAE;UACtB,MAAMI,WAAW,GAAGjB,IAAI,CAACkB,KAAK,CAC5BlB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIY,cAAc,GAAG,CAAC,CACrC,CAAC;UACD,MAAMM,WAAW,GAAGR,IAAI,CAACC,MAAM,CAACD,IAAI,CAACM,WAAW,CAAC;UACjDzB,YAAY,CAAC,CACX2B,WAAW,CAACC,WAAW,EACvBD,WAAW,CAACpB,GAAG,EACfoB,WAAW,CAACjB,GAAG,CAChB,CAAC;QACJ;MACF,CAAC,MACI;QACHa,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/Bb,aAAa,CAAC,CAAC;MACjB;IACF,CAAC,CAAC,CACDkB,KAAK,CAAEC,KAAK,IAAK;MAChBP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;IACpB,CAAC,CAAC;EACN,CAAC;EAEDrC,SAAS,CAAC,MAAM;IACd;IACA8B,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9Cb,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACd,KAAK,CAAC,CAAC,CAAC,CAAC;EACb,OAAO,IAAI,CAAC,CAAC;AACf;AAACC,EAAA,CA3DQF,aAAa;AAAAmC,EAAA,GAAbnC,aAAa;AA6DtB,eAAeA,aAAa;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}