{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext } from \"react\";\nimport ImageContext from \"../contexts/imageContext\";\nfunction fetchImageUrl() {\n  _s();\n  const {\n    imageInfo,\n    setImageInfo\n  } = useContext(ImageContext);\n  const latlng = getRandomCoordinates();\n  fetch(`https://api.openstreetcam.org/2.0/photo/?lat=${latlng[0]}&lng=${latlng[1]}&radius=500`).then(response => {\n    if (!response.ok) throw new Error(\"No image found\");\n    return response.json();\n  }).then(data => {\n    if (data.result) {\n      let numberOfImages = data.result.data.length;\n      console.log(`Found ${numberOfImages} images.`);\n      if (numberOfImages > 0) {\n        const randomIndex = Math.floor(Math.random() * (numberOfImages - 1));\n        const randomPhoto = data.result.data[randomIndex];\n        setImageInfo([randomPhoto.fileurlProc, randomPhoto.lat, randomPhoto.lng]);\n      }\n    } else {\n      console.log('No images found.');\n      fetchImageUrl();\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}\n_s(fetchImageUrl, \"BDfCsY9z1QrCch3sEcZtp7uE0LE=\");\n;\nexport default fetchImageUrl;","map":{"version":3,"names":["useContext","ImageContext","fetchImageUrl","_s","imageInfo","setImageInfo","latlng","getRandomCoordinates","fetch","then","response","ok","Error","json","data","result","numberOfImages","length","console","log","randomIndex","Math","floor","random","randomPhoto","fileurlProc","lat","lng","catch","error"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kÃ¶lnguessr/cologneguessr/src/components/fetchImageUrl.js"],"sourcesContent":["import { useContext } from \"react\";\r\nimport ImageContext from \"../contexts/imageContext\";\r\n\r\n\r\nfunction fetchImageUrl(){\r\n\r\n    const { imageInfo, setImageInfo } = useContext(ImageContext);\r\n\r\n    const latlng = getRandomCoordinates();\r\n    fetch(\r\n      `https://api.openstreetcam.org/2.0/photo/?lat=${latlng[0]}&lng=${latlng[1]}&radius=500`\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) throw new Error(\"No image found\");\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.result) {\r\n          let numberOfImages = data.result.data.length;\r\n          console.log(`Found ${numberOfImages} images.`);\r\n          if (numberOfImages > 0) {\r\n            const randomIndex = Math.floor(\r\n              Math.random() * (numberOfImages - 1)\r\n            );\r\n            const randomPhoto = data.result.data[randomIndex];\r\n            setImageInfo([\r\n              randomPhoto.fileurlProc,\r\n              randomPhoto.lat,\r\n              randomPhoto.lng,\r\n            ]);\r\n          }\r\n        }\r\n        else {\r\n          console.log('No images found.');\r\n          fetchImageUrl();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  export default fetchImageUrl;"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,YAAY,MAAM,0BAA0B;AAGnD,SAASC,aAAaA,CAAA,EAAE;EAAAC,EAAA;EAEpB,MAAM;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGL,UAAU,CAACC,YAAY,CAAC;EAE5D,MAAMK,MAAM,GAAGC,oBAAoB,CAAC,CAAC;EACrCC,KAAK,CACF,gDAA+CF,MAAM,CAAC,CAAC,CAAE,QAAOA,MAAM,CAAC,CAAC,CAAE,aAC7E,CAAC,CACEG,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACnD,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,MAAM,EAAE;MACf,IAAIC,cAAc,GAAGF,IAAI,CAACC,MAAM,CAACD,IAAI,CAACG,MAAM;MAC5CC,OAAO,CAACC,GAAG,CAAE,SAAQH,cAAe,UAAS,CAAC;MAC9C,IAAIA,cAAc,GAAG,CAAC,EAAE;QACtB,MAAMI,WAAW,GAAGC,IAAI,CAACC,KAAK,CAC5BD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIP,cAAc,GAAG,CAAC,CACrC,CAAC;QACD,MAAMQ,WAAW,GAAGV,IAAI,CAACC,MAAM,CAACD,IAAI,CAACM,WAAW,CAAC;QACjDf,YAAY,CAAC,CACXmB,WAAW,CAACC,WAAW,EACvBD,WAAW,CAACE,GAAG,EACfF,WAAW,CAACG,GAAG,CAChB,CAAC;MACJ;IACF,CAAC,MACI;MACHT,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/BjB,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,CAAC,CACD0B,KAAK,CAAEC,KAAK,IAAK;IAChBX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;EACpB,CAAC,CAAC;AACN;AAAC1B,EAAA,CApCMD,aAAa;AAoCnB;AAED,eAAeA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}