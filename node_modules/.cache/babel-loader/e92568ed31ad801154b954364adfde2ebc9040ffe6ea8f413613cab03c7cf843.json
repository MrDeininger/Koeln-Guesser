{"ast":null,"code":"var _jsxFileName = \"C:\\\\_Code\\\\WEB2\\\\Abgabe Final Huge\\\\k\\xF6lnguessr\\\\cologneguessr\\\\src\\\\components\\\\map\\\\imageMarker.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Marker } from 'react-leaflet';\nimport ImageContext from '../../contexts/imageContext';\nimport L from 'leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageMarker() {\n  _s();\n  const {\n    imageInfo\n  } = React.useContext(ImageContext);\n  const [markerPosition, setMarkerPosition] = useState(null);\n  const icon = L.divIcon({\n    className: 'custom-icon',\n    // Optional, you can use this class to style your icon in CSS\n    html: '<span style=\"line-height: 0.5; font-size: 24px; color: black;\">X</span>' // HTML for the icon\n  });\n\n  // useEffect hook to update the Marker position whenever the imageInfo changes\n  useEffect(() => {\n    // This code will run whenever `imageInfo` changes\n    if (imageInfo !== null) {\n      setMarkerPosition([imageInfo[1], imageInfo[2]]);\n    }\n  }, [imageInfo]); // The array of dependencies for the useEffect hook. Whenever any of these change, the effect will run again.\n\n  return markerPosition === null ? null : /*#__PURE__*/_jsxDEV(Marker, {\n    position: markerPosition,\n    icon: icon\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 45\n  }, this);\n}\n_s(ImageMarker, \"tbgOmkbFikgs7bVGk2+n+yXrfvw=\");\n_c = ImageMarker;\nexport default ImageMarker;\nvar _c;\n$RefreshReg$(_c, \"ImageMarker\");","map":{"version":3,"names":["React","useEffect","useState","Marker","ImageContext","L","jsxDEV","_jsxDEV","ImageMarker","_s","imageInfo","useContext","markerPosition","setMarkerPosition","icon","divIcon","className","html","position","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/k√∂lnguessr/cologneguessr/src/components/map/imageMarker.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Marker } from 'react-leaflet';\r\nimport ImageContext from '../../contexts/imageContext';\r\nimport L from 'leaflet';\r\n\r\nfunction ImageMarker() {\r\n    const { imageInfo } = React.useContext(ImageContext);\r\n    const [markerPosition, setMarkerPosition] = useState(null);\r\n\r\n\r\n    const icon = L.divIcon({\r\n        className: 'custom-icon', // Optional, you can use this class to style your icon in CSS\r\n        html: '<span style=\"line-height: 0.5; font-size: 24px; color: black;\">X</span>', // HTML for the icon\r\n    });\r\n\r\n    // useEffect hook to update the Marker position whenever the imageInfo changes\r\n    useEffect(() => {\r\n        // This code will run whenever `imageInfo` changes\r\n        if (imageInfo !== null) {\r\n            setMarkerPosition([imageInfo[1], imageInfo[2]]);\r\n        }\r\n    }, [imageInfo]); // The array of dependencies for the useEffect hook. Whenever any of these change, the effect will run again.\r\n\r\n    return markerPosition === null ? null : <Marker position={markerPosition} icon={icon} />;\r\n}\r\n\r\nexport default ImageMarker;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,CAAC,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM;IAAEC;EAAU,CAAC,GAAGV,KAAK,CAACW,UAAU,CAACP,YAAY,CAAC;EACpD,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAG1D,MAAMY,IAAI,GAAGT,CAAC,CAACU,OAAO,CAAC;IACnBC,SAAS,EAAE,aAAa;IAAE;IAC1BC,IAAI,EAAE,yEAAyE,CAAE;EACrF,CAAC,CAAC;;EAEF;EACAhB,SAAS,CAAC,MAAM;IACZ;IACA,IAAIS,SAAS,KAAK,IAAI,EAAE;MACpBG,iBAAiB,CAAC,CAACH,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD;EACJ,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB,OAAOE,cAAc,KAAK,IAAI,GAAG,IAAI,gBAAGL,OAAA,CAACJ,MAAM;IAACe,QAAQ,EAAEN,cAAe;IAACE,IAAI,EAAEA;EAAK;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5F;AAACb,EAAA,CAnBQD,WAAW;AAAAe,EAAA,GAAXf,WAAW;AAqBpB,eAAeA,WAAW;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}