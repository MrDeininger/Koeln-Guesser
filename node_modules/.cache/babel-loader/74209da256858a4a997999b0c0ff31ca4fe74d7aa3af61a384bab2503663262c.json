{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext } from \"react\";\nimport ImageContext from \"../contexts/imageContext\";\nfunction FetchImageUrl() {\n  _s();\n  const getRandomCoordinates = () => {\n    // Define the latitude and longitude boundaries of the rectangle\n    const latMin = 50.89588741;\n    const latMax = 50.99128564;\n    const lngMin = 6.87332153;\n    const lngMax = 7.02060699;\n\n    // Generate a random latitude and longitude within the rectangle\n    const lat = Math.random() * (latMax - latMin) + latMin;\n    const lng = Math.random() * (lngMax - lngMin) + lngMin;\n    return [lat, lng];\n  };\n  const {\n    imageInfo,\n    setImageInfo\n  } = useContext(ImageContext);\n  const latlng = getRandomCoordinates();\n  fetch(`https://api.openstreetcam.org/2.0/photo/?lat=${latlng[0]}&lng=${latlng[1]}&radius=500`).then(response => {\n    if (!response.ok) throw new Error(\"No image found\");\n    return response.json();\n  }).then(data => {\n    if (data.result) {\n      let numberOfImages = data.result.data.length;\n      console.log(`Found ${numberOfImages} images.`);\n      if (numberOfImages > 0) {\n        const randomIndex = Math.floor(Math.random() * (numberOfImages - 1));\n        const randomPhoto = data.result.data[randomIndex];\n        setImageInfo([randomPhoto.fileurlProc, randomPhoto.lat, randomPhoto.lng]);\n      }\n    } else {\n      console.log('No images found.');\n      fetchImageUrl();\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}\n_s(FetchImageUrl, \"BDfCsY9z1QrCch3sEcZtp7uE0LE=\");\n_c = FetchImageUrl;\n;\nexport default FetchImageUrl;\nvar _c;\n$RefreshReg$(_c, \"FetchImageUrl\");","map":{"version":3,"names":["useContext","ImageContext","FetchImageUrl","_s","getRandomCoordinates","latMin","latMax","lngMin","lngMax","lat","Math","random","lng","imageInfo","setImageInfo","latlng","fetch","then","response","ok","Error","json","data","result","numberOfImages","length","console","log","randomIndex","floor","randomPhoto","fileurlProc","fetchImageUrl","catch","error","_c","$RefreshReg$"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kÃ¶lnguessr/cologneguessr/src/components/fetchImageUrl.js"],"sourcesContent":["import { useContext } from \"react\";\r\nimport ImageContext from \"../contexts/imageContext\";\r\n\r\n\r\nfunction FetchImageUrl(){\r\n\r\n    const getRandomCoordinates = () => {\r\n        // Define the latitude and longitude boundaries of the rectangle\r\n        const latMin = 50.89588741;\r\n        const latMax = 50.99128564;\r\n        const lngMin = 6.87332153;\r\n        const lngMax = 7.02060699;\r\n    \r\n        // Generate a random latitude and longitude within the rectangle\r\n        const lat = Math.random() * (latMax - latMin) + latMin;\r\n        const lng = Math.random() * (lngMax - lngMin) + lngMin;\r\n    \r\n        return [lat, lng];\r\n      };\r\n    \r\n\r\n    const { imageInfo, setImageInfo } = useContext(ImageContext);\r\n\r\n    const latlng = getRandomCoordinates();\r\n    fetch(\r\n      `https://api.openstreetcam.org/2.0/photo/?lat=${latlng[0]}&lng=${latlng[1]}&radius=500`\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) throw new Error(\"No image found\");\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.result) {\r\n          let numberOfImages = data.result.data.length;\r\n          console.log(`Found ${numberOfImages} images.`);\r\n          if (numberOfImages > 0) {\r\n            const randomIndex = Math.floor(\r\n              Math.random() * (numberOfImages - 1)\r\n            );\r\n            const randomPhoto = data.result.data[randomIndex];\r\n            setImageInfo([\r\n              randomPhoto.fileurlProc,\r\n              randomPhoto.lat,\r\n              randomPhoto.lng,\r\n            ]);\r\n          }\r\n        }\r\n        else {\r\n          console.log('No images found.');\r\n          fetchImageUrl();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  export default FetchImageUrl;"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,YAAY,MAAM,0BAA0B;AAGnD,SAASC,aAAaA,CAAA,EAAE;EAAAC,EAAA;EAEpB,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IAC/B;IACA,MAAMC,MAAM,GAAG,WAAW;IAC1B,MAAMC,MAAM,GAAG,WAAW;IAC1B,MAAMC,MAAM,GAAG,UAAU;IACzB,MAAMC,MAAM,GAAG,UAAU;;IAEzB;IACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIL,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IACtD,MAAMO,GAAG,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIH,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IAEtD,OAAO,CAACE,GAAG,EAAEG,GAAG,CAAC;EACnB,CAAC;EAGH,MAAM;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGd,UAAU,CAACC,YAAY,CAAC;EAE5D,MAAMc,MAAM,GAAGX,oBAAoB,CAAC,CAAC;EACrCY,KAAK,CACF,gDAA+CD,MAAM,CAAC,CAAC,CAAE,QAAOA,MAAM,CAAC,CAAC,CAAE,aAC7E,CAAC,CACEE,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACnD,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,MAAM,EAAE;MACf,IAAIC,cAAc,GAAGF,IAAI,CAACC,MAAM,CAACD,IAAI,CAACG,MAAM;MAC5CC,OAAO,CAACC,GAAG,CAAE,SAAQH,cAAe,UAAS,CAAC;MAC9C,IAAIA,cAAc,GAAG,CAAC,EAAE;QACtB,MAAMI,WAAW,GAAGlB,IAAI,CAACmB,KAAK,CAC5BnB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIa,cAAc,GAAG,CAAC,CACrC,CAAC;QACD,MAAMM,WAAW,GAAGR,IAAI,CAACC,MAAM,CAACD,IAAI,CAACM,WAAW,CAAC;QACjDd,YAAY,CAAC,CACXgB,WAAW,CAACC,WAAW,EACvBD,WAAW,CAACrB,GAAG,EACfqB,WAAW,CAAClB,GAAG,CAChB,CAAC;MACJ;IACF,CAAC,MACI;MACHc,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/BK,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IAChBR,OAAO,CAACC,GAAG,CAACO,KAAK,CAAC;EACpB,CAAC,CAAC;AACN;AAAC/B,EAAA,CAnDMD,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AAmDnB;AAED,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}