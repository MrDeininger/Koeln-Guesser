{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useEffect } from 'react';\nimport ImageContext from \"../contexts/imageContext\";\nfunction OpenStreetCam() {\n  _s();\n  const {\n    imageInfo,\n    setImageInfo\n  } = useContext(ImageContext);\n  const fetchImage = (retryCount = 0) => {\n    if (retryCount > 5) {\n      // Maximum 5 retries\n      console.error('Failed to fetch image after 5 attempts');\n      return;\n    }\n\n    // Define the latitude and longitude boundaries of the rectangle\n    const latMin = 50.9100;\n    const latMax = 50.9600;\n    const lngMin = 6.89516;\n    const lngMax = 7.06372;\n\n    // Generate a random latitude and longitude within the rectangle\n    const lat = Math.random() * (latMax - latMin) + latMin;\n    const lng = Math.random() * (lngMax - lngMin) + lngMin;\n    console.log(\"Fetching OpenStreetCam image...\");\n    fetch(`https://api.openstreetcam.org/2.0/photo/?lat=${lat}&lng=${lng}&radius=500`).then(response => {\n      if (!response.ok) {\n        if (response.status === 404) {\n          console.log('Image not found, retrying...');\n          fetchImage(retryCount + 1); // Retry if image not found\n        } else {\n          throw new Error(\"Error fetching image\");\n        }\n      } else {\n        return response.json();\n      }\n    }).then(data => {\n      if (data) {\n        let numberOfImages = data.result.data.length;\n        console.log(`Found ${numberOfImages} images.`);\n        if (numberOfImages > 0) {\n          const randomIndex = Math.floor(Math.random() * (numberOfImages - 1));\n          const randomPhoto = data.result.data[randomIndex];\n          setImageInfo([randomPhoto.fileurlProc, randomPhoto.lat, randomPhoto.lng]);\n        }\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  useEffect(() => {\n    if (imageInfo) return; // If imageInfo is already set, don't run this code\n    fetchImage();\n  }, [imageInfo]); // Only run this code when imageInfo changes\n\n  return null; // or return your JSX here\n}\n_s(OpenStreetCam, \"+Mev5vz49xQwATHy3XgmyONiRbI=\");\n_c = OpenStreetCam;\nexport default OpenStreetCam;\nvar _c;\n$RefreshReg$(_c, \"OpenStreetCam\");","map":{"version":3,"names":["useContext","useEffect","ImageContext","OpenStreetCam","_s","imageInfo","setImageInfo","fetchImage","retryCount","console","error","latMin","latMax","lngMin","lngMax","lat","Math","random","lng","log","fetch","then","response","ok","status","Error","json","data","numberOfImages","result","length","randomIndex","floor","randomPhoto","fileurlProc","catch","_c","$RefreshReg$"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kÃ¶lnguessr/cologneguessr/src/components/openstreetcam.js"],"sourcesContent":["import { useContext, useEffect } from 'react';\r\nimport ImageContext from \"../contexts/imageContext\";\r\n\r\nfunction OpenStreetCam() {\r\n    const { imageInfo,  setImageInfo } = useContext(ImageContext);\r\n\r\n    const fetchImage = (retryCount = 0) => {\r\n        if (retryCount > 5) { // Maximum 5 retries\r\n            console.error('Failed to fetch image after 5 attempts');\r\n            return;\r\n        }\r\n\r\n        // Define the latitude and longitude boundaries of the rectangle\r\n        const latMin = 50.9100;\r\n        const latMax = 50.9600;\r\n        const lngMin = 6.89516;\r\n        const lngMax = 7.06372;\r\n\r\n        // Generate a random latitude and longitude within the rectangle\r\n        const lat = Math.random() * (latMax - latMin) + latMin;\r\n        const lng = Math.random() * (lngMax - lngMin) + lngMin;\r\n        console.log(\"Fetching OpenStreetCam image...\"); \r\n        fetch(\r\n            `https://api.openstreetcam.org/2.0/photo/?lat=${lat}&lng=${lng}&radius=500`\r\n        )\r\n            .then((response) => {\r\n                if(!response.ok) {\r\n                    if (response.status === 404) {\r\n                        console.log('Image not found, retrying...');\r\n                        fetchImage(retryCount + 1); // Retry if image not found\r\n\r\n                    } else {\r\n                        throw new Error(\"Error fetching image\");\r\n                    }\r\n                    \r\n                } else {\r\n                    return response.json();\r\n                }\r\n            })\r\n            .then((data) => {\r\n                if (data) {\r\n                    let numberOfImages = data.result.data.length;\r\n                    console.log(`Found ${numberOfImages} images.`);\r\n                    if (numberOfImages > 0) {\r\n                        const randomIndex = Math.floor(Math.random() * (numberOfImages -1));\r\n                        const randomPhoto = data.result.data[randomIndex];\r\n                        setImageInfo([randomPhoto.fileurlProc, randomPhoto.lat, randomPhoto.lng]);\r\n                    } \r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (imageInfo) return; // If imageInfo is already set, don't run this code\r\n        fetchImage();\r\n    }, [imageInfo]); // Only run this code when imageInfo changes\r\n\r\n    return null; // or return your JSX here\r\n}\r\n\r\nexport default OpenStreetCam;"],"mappings":";AAAA,SAASA,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7C,OAAOC,YAAY,MAAM,0BAA0B;AAEnD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAAEC,SAAS;IAAGC;EAAa,CAAC,GAAGN,UAAU,CAACE,YAAY,CAAC;EAE7D,MAAMK,UAAU,GAAGA,CAACC,UAAU,GAAG,CAAC,KAAK;IACnC,IAAIA,UAAU,GAAG,CAAC,EAAE;MAAE;MAClBC,OAAO,CAACC,KAAK,CAAC,wCAAwC,CAAC;MACvD;IACJ;;IAEA;IACA,MAAMC,MAAM,GAAG,OAAO;IACtB,MAAMC,MAAM,GAAG,OAAO;IACtB,MAAMC,MAAM,GAAG,OAAO;IACtB,MAAMC,MAAM,GAAG,OAAO;;IAEtB;IACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIL,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IACtD,MAAMO,GAAG,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIH,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IACtDJ,OAAO,CAACU,GAAG,CAAC,iCAAiC,CAAC;IAC9CC,KAAK,CACA,gDAA+CL,GAAI,QAAOG,GAAI,aACnE,CAAC,CACIG,IAAI,CAAEC,QAAQ,IAAK;MAChB,IAAG,CAACA,QAAQ,CAACC,EAAE,EAAE;QACb,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;UACzBf,OAAO,CAACU,GAAG,CAAC,8BAA8B,CAAC;UAC3CZ,UAAU,CAACC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;QAEhC,CAAC,MAAM;UACH,MAAM,IAAIiB,KAAK,CAAC,sBAAsB,CAAC;QAC3C;MAEJ,CAAC,MAAM;QACH,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC1B;IACJ,CAAC,CAAC,CACDL,IAAI,CAAEM,IAAI,IAAK;MACZ,IAAIA,IAAI,EAAE;QACN,IAAIC,cAAc,GAAGD,IAAI,CAACE,MAAM,CAACF,IAAI,CAACG,MAAM;QAC5CrB,OAAO,CAACU,GAAG,CAAE,SAAQS,cAAe,UAAS,CAAC;QAC9C,IAAIA,cAAc,GAAG,CAAC,EAAE;UACpB,MAAMG,WAAW,GAAGf,IAAI,CAACgB,KAAK,CAAChB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIW,cAAc,GAAE,CAAC,CAAC,CAAC;UACnE,MAAMK,WAAW,GAAGN,IAAI,CAACE,MAAM,CAACF,IAAI,CAACI,WAAW,CAAC;UACjDzB,YAAY,CAAC,CAAC2B,WAAW,CAACC,WAAW,EAAED,WAAW,CAAClB,GAAG,EAAEkB,WAAW,CAACf,GAAG,CAAC,CAAC;QAC7E;MACJ;IACJ,CAAC,CAAC,CACDiB,KAAK,CAAEzB,KAAK,IAAK;MACdD,OAAO,CAACU,GAAG,CAACT,KAAK,CAAC;IACtB,CAAC,CAAC;EACV,CAAC;EAEDT,SAAS,CAAC,MAAM;IACZ,IAAII,SAAS,EAAE,OAAO,CAAC;IACvBE,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,CAACF,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB,OAAO,IAAI,CAAC,CAAC;AACjB;AAACD,EAAA,CA1DQD,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AA4DtB,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}