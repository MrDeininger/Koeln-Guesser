{"ast":null,"code":"import{useContext,useEffect}from\"react\";import ImageContext from\"../contexts/imageContext\";import ScoreContext from\"../contexts/scoreContext\";function OpenStreetCam(_ref){let{reset}=_ref;const{imageInfo,setImageInfo}=useContext(ImageContext);const{scoreInfo}=useContext(ScoreContext);const getRandomCoordinates=()=>{// Define the latitude and longitude boundaries of the rectangle\nconst latMin=50.91;const latMax=50.96;const lngMin=6.9516;const lngMax=7.05372;// Generate a random latitude and longitude within the rectangle\nconst lat=Math.random()*(latMax-latMin)+latMin;const lng=Math.random()*(lngMax-lngMin)+lngMin;return[lat,lng];};const fetchImageUrl=()=>{const latlng=getRandomCoordinates();fetch(\"https://api.openstreetcam.org/2.0/photo/?lat=\".concat(latlng[0],\"&lng=\").concat(latlng[1],\"&radius=500\")).then(response=>{if(!response.ok)throw new Error(\"No image found\");return response.json();}).then(data=>{if(data.result){let numberOfImages=data.result.data.length;console.log(\"Found \".concat(numberOfImages,\" images.\"));if(numberOfImages>0){const randomIndex=Math.floor(Math.random()*(numberOfImages-1));const randomPhoto=data.result.data[randomIndex];setImageInfo([randomPhoto.fileurlProc,randomPhoto.lat,randomPhoto.lng]);}}}).catch(error=>{console.log(error);});};useEffect(()=>{// Define the latitude and longitude boundaries of the rectangle\nconsole.log(\"Fetching OpenStreetCam image...\");fetchImageUrl();},[reset]);// Only run this code when the scoreInfo changes\nreturn null;// or return your JSX here\n}export default OpenStreetCam;","map":{"version":3,"names":["useContext","useEffect","ImageContext","ScoreContext","OpenStreetCam","_ref","reset","imageInfo","setImageInfo","scoreInfo","getRandomCoordinates","latMin","latMax","lngMin","lngMax","lat","Math","random","lng","fetchImageUrl","latlng","fetch","concat","then","response","ok","Error","json","data","result","numberOfImages","length","console","log","randomIndex","floor","randomPhoto","fileurlProc","catch","error"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kÃ¶lnguessr/cologneguessr/src/components/openstreetcam.js"],"sourcesContent":["import { useContext, useEffect } from \"react\";\r\nimport ImageContext from \"../contexts/imageContext\";\r\nimport ScoreContext from \"../contexts/scoreContext\";\r\n\r\nfunction OpenStreetCam({ reset }) {\r\n  const { imageInfo, setImageInfo } = useContext(ImageContext);\r\n  const { scoreInfo } = useContext(ScoreContext);\r\n\r\n  const getRandomCoordinates = () => {\r\n    // Define the latitude and longitude boundaries of the rectangle\r\n    const latMin = 50.91;\r\n    const latMax = 50.96;\r\n    const lngMin = 6.9516;\r\n    const lngMax = 7.05372;\r\n\r\n    // Generate a random latitude and longitude within the rectangle\r\n    const lat = Math.random() * (latMax - latMin) + latMin;\r\n    const lng = Math.random() * (lngMax - lngMin) + lngMin;\r\n\r\n    return [lat, lng];\r\n  };\r\n\r\n  const fetchImageUrl = () => {\r\n    const latlng = getRandomCoordinates();\r\n    fetch(\r\n      `https://api.openstreetcam.org/2.0/photo/?lat=${latlng[0]}&lng=${latlng[1]}&radius=500`\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) throw new Error(\"No image found\");\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.result) {\r\n          let numberOfImages = data.result.data.length;\r\n          console.log(`Found ${numberOfImages} images.`);\r\n          if (numberOfImages > 0) {\r\n            const randomIndex = Math.floor(\r\n              Math.random() * (numberOfImages - 1)\r\n            );\r\n            const randomPhoto = data.result.data[randomIndex];\r\n            setImageInfo([\r\n              randomPhoto.fileurlProc,\r\n              randomPhoto.lat,\r\n              randomPhoto.lng,\r\n            ]);\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Define the latitude and longitude boundaries of the rectangle\r\n    console.log(\"Fetching OpenStreetCam image...\");\r\n    fetchImageUrl();\r\n  }, [reset]); // Only run this code when the scoreInfo changes\r\n  return null; // or return your JSX here\r\n}\r\n\r\nexport default OpenStreetCam;\r\n"],"mappings":"AAAA,OAASA,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAC7C,MAAO,CAAAC,YAAY,KAAM,0BAA0B,CACnD,MAAO,CAAAC,YAAY,KAAM,0BAA0B,CAEnD,QAAS,CAAAC,aAAaA,CAAAC,IAAA,CAAY,IAAX,CAAEC,KAAM,CAAC,CAAAD,IAAA,CAC9B,KAAM,CAAEE,SAAS,CAAEC,YAAa,CAAC,CAAGR,UAAU,CAACE,YAAY,CAAC,CAC5D,KAAM,CAAEO,SAAU,CAAC,CAAGT,UAAU,CAACG,YAAY,CAAC,CAE9C,KAAM,CAAAO,oBAAoB,CAAGA,CAAA,GAAM,CACjC;AACA,KAAM,CAAAC,MAAM,CAAG,KAAK,CACpB,KAAM,CAAAC,MAAM,CAAG,KAAK,CACpB,KAAM,CAAAC,MAAM,CAAG,MAAM,CACrB,KAAM,CAAAC,MAAM,CAAG,OAAO,CAEtB;AACA,KAAM,CAAAC,GAAG,CAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,EAAIL,MAAM,CAAGD,MAAM,CAAC,CAAGA,MAAM,CACtD,KAAM,CAAAO,GAAG,CAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,EAAIH,MAAM,CAAGD,MAAM,CAAC,CAAGA,MAAM,CAEtD,MAAO,CAACE,GAAG,CAAEG,GAAG,CAAC,CACnB,CAAC,CAED,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAAAC,MAAM,CAAGV,oBAAoB,CAAC,CAAC,CACrCW,KAAK,iDAAAC,MAAA,CAC6CF,MAAM,CAAC,CAAC,CAAC,UAAAE,MAAA,CAAQF,MAAM,CAAC,CAAC,CAAC,eAC5E,CAAC,CACEG,IAAI,CAAEC,QAAQ,EAAK,CAClB,GAAI,CAACA,QAAQ,CAACC,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,gBAAgB,CAAC,CACnD,MAAO,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,EAAK,CACd,GAAIA,IAAI,CAACC,MAAM,CAAE,CACf,GAAI,CAAAC,cAAc,CAAGF,IAAI,CAACC,MAAM,CAACD,IAAI,CAACG,MAAM,CAC5CC,OAAO,CAACC,GAAG,UAAAX,MAAA,CAAUQ,cAAc,YAAU,CAAC,CAC9C,GAAIA,cAAc,CAAG,CAAC,CAAE,CACtB,KAAM,CAAAI,WAAW,CAAGlB,IAAI,CAACmB,KAAK,CAC5BnB,IAAI,CAACC,MAAM,CAAC,CAAC,EAAIa,cAAc,CAAG,CAAC,CACrC,CAAC,CACD,KAAM,CAAAM,WAAW,CAAGR,IAAI,CAACC,MAAM,CAACD,IAAI,CAACM,WAAW,CAAC,CACjD1B,YAAY,CAAC,CACX4B,WAAW,CAACC,WAAW,CACvBD,WAAW,CAACrB,GAAG,CACfqB,WAAW,CAAClB,GAAG,CAChB,CAAC,CACJ,CACF,CACF,CAAC,CAAC,CACDoB,KAAK,CAAEC,KAAK,EAAK,CAChBP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC,CACpB,CAAC,CAAC,CACN,CAAC,CAEDtC,SAAS,CAAC,IAAM,CACd;AACA+B,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAC9Cd,aAAa,CAAC,CAAC,CACjB,CAAC,CAAE,CAACb,KAAK,CAAC,CAAC,CAAE;AACb,MAAO,KAAI,CAAE;AACf,CAEA,cAAe,CAAAF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}