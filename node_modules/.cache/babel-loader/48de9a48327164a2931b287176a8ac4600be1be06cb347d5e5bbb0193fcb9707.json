{"ast":null,"code":"var _jsxFileName = \"C:\\\\_Code\\\\WEB2\\\\Abgabe Final Huge\\\\k\\xF6lnguessr\\\\cologneguessr\\\\src\\\\game.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport './css/game.css';\nimport ImageDisplay from './components/imageViewer';\nimport ImageContext from './contexts/imageContext';\nimport MapComponent from './components/map/mapComponent';\nimport MapCoordinatesContext from './contexts/mapContext';\nimport haversine from './components/haversine';\nimport OpenStreetCam from './components/openstreetcam';\nimport SubmitGuessButton from './components/submitGuessButton';\nimport GameContext from './contexts/gameContext';\nimport ScoreContext from './contexts/scoreContext';\nimport ScoreDisplay from './components/ScoreDisplay';\nimport { Link } from 'react-router-dom';\nimport ResetGameButton from './components/resetGameButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  console.log('Game');\n  const {\n    coordinates,\n    setCoordinates\n  } = React.useContext(MapCoordinatesContext);\n  const {\n    imageInfo,\n    setImageInfo\n  } = useContext(ImageContext);\n  const {\n    gameInfo,\n    setGameInfo\n  } = useContext(GameContext);\n  const {\n    scoreInfo\n  } = useContext(ScoreContext);\n  const [reset, setReset] = useState(false);\n  function resetGame() {\n    setCoordinates(null);\n    const currentGameInfo = {\n      ...gameInfo\n    };\n    setGameInfo({\n      name: currentGameInfo.name\n    });\n    setImageInfo(null);\n    setReset(!reset);\n  }\n  ;\n  useEffect(() => {\n    if (coordinates && imageInfo) {\n      const newGameInfo = {\n        ...gameInfo\n      };\n      const dist = haversine(coordinates.lat, coordinates.lng, imageInfo[1], imageInfo[2]);\n      newGameInfo.distance = dist;\n      newGameInfo.lat = coordinates.lat;\n      newGameInfo.lng = coordinates.lng;\n      newGameInfo.latImg = imageInfo[1];\n      newGameInfo.lngImg = imageInfo[2];\n      newGameInfo.score = Math.round(1000 - dist * 100);\n      setGameInfo(newGameInfo);\n    }\n  }, [coordinates, imageInfo]); // Run effect when coordinates change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gameContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"K\\xF6lnGuesser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MapComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ScoreDisplay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ImageDisplay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), coordinates ? /*#__PURE__*/_jsxDEV(SubmitGuessButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 28\n    }, this) : '', /*#__PURE__*/_jsxDEV(ResetGameButton, {\n      resetGame: resetGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/home\",\n      className: \"Home\",\n      onClick: resetGame,\n      children: \"home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(OpenStreetCam, {\n      reset: reset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"tjUxydeMC+fHNFAPM6Nw9PCv01g=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useContext","useEffect","useState","ImageDisplay","ImageContext","MapComponent","MapCoordinatesContext","haversine","OpenStreetCam","SubmitGuessButton","GameContext","ScoreContext","ScoreDisplay","Link","ResetGameButton","jsxDEV","_jsxDEV","Game","_s","console","log","coordinates","setCoordinates","imageInfo","setImageInfo","gameInfo","setGameInfo","scoreInfo","reset","setReset","resetGame","currentGameInfo","name","newGameInfo","dist","lat","lng","distance","latImg","lngImg","score","Math","round","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","onClick","_c","$RefreshReg$"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kölnguessr/cologneguessr/src/game.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport './css/game.css';\r\nimport ImageDisplay from './components/imageViewer';\r\nimport ImageContext from './contexts/imageContext';\r\nimport MapComponent from './components/map/mapComponent';\r\nimport MapCoordinatesContext from './contexts/mapContext';\r\nimport haversine from './components/haversine';\r\nimport OpenStreetCam from './components/openstreetcam';\r\nimport SubmitGuessButton from './components/submitGuessButton';\r\nimport GameContext from './contexts/gameContext';\r\nimport ScoreContext from './contexts/scoreContext';\r\nimport ScoreDisplay from './components/ScoreDisplay';\r\nimport { Link } from 'react-router-dom';\r\nimport ResetGameButton from './components/resetGameButton';\r\n\r\n\r\nfunction Game() {\r\n    console.log('Game');\r\n    const { coordinates, setCoordinates } = React.useContext(MapCoordinatesContext);\r\n    const { imageInfo, setImageInfo } = useContext(ImageContext);\r\n    const { gameInfo, setGameInfo } = useContext(GameContext);\r\n    const {scoreInfo} = useContext(ScoreContext);\r\n    const [reset, setReset] = useState(false);\r\n\r\n\r\n    function resetGame() {\r\n        setCoordinates(null);\r\n        const currentGameInfo = {...gameInfo};\r\n        setGameInfo({name: currentGameInfo.name});\r\n\r\n        setImageInfo(null);\r\n        setReset(!reset);\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if(coordinates && imageInfo) {\r\n            const newGameInfo = {...gameInfo};\r\n            const dist = haversine(coordinates.lat, coordinates.lng, imageInfo[1], imageInfo[2]);\r\n            newGameInfo.distance = dist;\r\n            newGameInfo.lat = coordinates.lat;\r\n            newGameInfo.lng = coordinates.lng;\r\n            newGameInfo.latImg = imageInfo[1];\r\n            newGameInfo.lngImg = imageInfo[2];\r\n            newGameInfo.score = Math.round(1000 - dist * 100);\r\n            setGameInfo(newGameInfo);\r\n        }\r\n    }, [coordinates, imageInfo]); // Run effect when coordinates change\r\n    \r\n\r\n    return (\r\n        <div className='gameContainer'>\r\n            <h1>KölnGuesser</h1>\r\n            <MapComponent />\r\n            <ScoreDisplay />\r\n            <ImageDisplay />\r\n            {coordinates ? <SubmitGuessButton /> : ''}\r\n\r\n            <ResetGameButton resetGame={resetGame} />\r\n            <Link to='/home' className='Home' onClick={resetGame}>home</Link>\r\n            <OpenStreetCam reset={reset} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Game;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,OAAO,gBAAgB;AACvB,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,YAAY,MAAM,+BAA+B;AACxD,OAAOC,qBAAqB,MAAM,uBAAuB;AACzD,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,eAAe,MAAM,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG3D,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACZC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;EACnB,MAAM;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGvB,KAAK,CAACC,UAAU,CAACM,qBAAqB,CAAC;EAC/E,MAAM;IAAEiB,SAAS;IAAEC;EAAa,CAAC,GAAGxB,UAAU,CAACI,YAAY,CAAC;EAC5D,MAAM;IAAEqB,QAAQ;IAAEC;EAAY,CAAC,GAAG1B,UAAU,CAACU,WAAW,CAAC;EACzD,MAAM;IAACiB;EAAS,CAAC,GAAG3B,UAAU,CAACW,YAAY,CAAC;EAC5C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAGzC,SAAS4B,SAASA,CAAA,EAAG;IACjBR,cAAc,CAAC,IAAI,CAAC;IACpB,MAAMS,eAAe,GAAG;MAAC,GAAGN;IAAQ,CAAC;IACrCC,WAAW,CAAC;MAACM,IAAI,EAAED,eAAe,CAACC;IAAI,CAAC,CAAC;IAEzCR,YAAY,CAAC,IAAI,CAAC;IAClBK,QAAQ,CAAC,CAACD,KAAK,CAAC;EACpB;EAAC;EAID3B,SAAS,CAAC,MAAM;IACZ,IAAGoB,WAAW,IAAIE,SAAS,EAAE;MACzB,MAAMU,WAAW,GAAG;QAAC,GAAGR;MAAQ,CAAC;MACjC,MAAMS,IAAI,GAAG3B,SAAS,CAACc,WAAW,CAACc,GAAG,EAAEd,WAAW,CAACe,GAAG,EAAEb,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;MACpFU,WAAW,CAACI,QAAQ,GAAGH,IAAI;MAC3BD,WAAW,CAACE,GAAG,GAAGd,WAAW,CAACc,GAAG;MACjCF,WAAW,CAACG,GAAG,GAAGf,WAAW,CAACe,GAAG;MACjCH,WAAW,CAACK,MAAM,GAAGf,SAAS,CAAC,CAAC,CAAC;MACjCU,WAAW,CAACM,MAAM,GAAGhB,SAAS,CAAC,CAAC,CAAC;MACjCU,WAAW,CAACO,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,GAAGR,IAAI,GAAG,GAAG,CAAC;MACjDR,WAAW,CAACO,WAAW,CAAC;IAC5B;EACJ,CAAC,EAAE,CAACZ,WAAW,EAAEE,SAAS,CAAC,CAAC,CAAC,CAAC;;EAG9B,oBACIP,OAAA;IAAK2B,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC1B5B,OAAA;MAAA4B,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBhC,OAAA,CAACX,YAAY;MAAAwC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChBhC,OAAA,CAACJ,YAAY;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChBhC,OAAA,CAACb,YAAY;MAAA0C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACf3B,WAAW,gBAAGL,OAAA,CAACP,iBAAiB;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,GAAG,EAAE,eAEzChC,OAAA,CAACF,eAAe;MAACgB,SAAS,EAAEA;IAAU;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzChC,OAAA,CAACH,IAAI;MAACoC,EAAE,EAAC,OAAO;MAACN,SAAS,EAAC,MAAM;MAACO,OAAO,EAAEpB,SAAU;MAAAc,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACjEhC,OAAA,CAACR,aAAa;MAACoB,KAAK,EAAEA;IAAM;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEd;AAAC9B,EAAA,CAhDQD,IAAI;AAAAkC,EAAA,GAAJlC,IAAI;AAoDb,eAAeA,IAAI;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}