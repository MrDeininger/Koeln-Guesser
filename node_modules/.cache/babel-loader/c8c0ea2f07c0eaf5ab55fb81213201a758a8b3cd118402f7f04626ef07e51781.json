{"ast":null,"code":"import React,{useContext,useEffect,useState}from'react';import'./css/game.css';import ImageDisplay from'./components/imageViewer';import ImageContext from'./contexts/imageContext';import MapComponent from'./components/map/mapComponent';import MapCoordinatesContext from'./contexts/mapContext';import haversine from'./components/haversine';import OpenStreetCam from'./components/openstreetcam';import SubmitGuessButton from'./components/submitGuessButton';import GameContext from'./contexts/gameContext';import ScoreDisplay from'./components/ScoreDisplay';import{Link}from'react-router-dom';import ResetGameButton from'./components/resetGameButton';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Game(){console.log('Game');const{coordinates,setCoordinates}=React.useContext(MapCoordinatesContext);const{imageInfo,setImageInfo}=useContext(ImageContext);const{gameInfo,setGameInfo}=useContext(GameContext);const[reset,setReset]=useState(false);function resetGame(){setCoordinates(null);// lösche alle Daten aus gameInfo, außer name\nconst currentGameInfo={...gameInfo};setGameInfo({name:currentGameInfo.name});setImageInfo(null);// lade neues Bild\nsetReset(!reset);};useEffect(()=>{if(coordinates&&imageInfo){const newGameInfo={...gameInfo};const dist=haversine(coordinates.lat,coordinates.lng,imageInfo[1],imageInfo[2]);newGameInfo.distance=dist;newGameInfo.lat=coordinates.lat;newGameInfo.lng=coordinates.lng;newGameInfo.latImg=imageInfo[1];newGameInfo.lngImg=imageInfo[2];newGameInfo.score=Math.round(1000-dist*100);setGameInfo(newGameInfo);}},[coordinates,imageInfo]);// Effekt wird nur ausgeführt, wenn sich coordinates oder imageInfo ändern\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"gameContainer\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"K\\xF6lnGuesser\"}),/*#__PURE__*/_jsx(MapComponent,{}),/*#__PURE__*/_jsx(ScoreDisplay,{}),/*#__PURE__*/_jsx(ImageDisplay,{}),/*#__PURE__*/_jsxs(\"div\",{style:{display:'flex',justifyContent:'space-between'},children:[coordinates?/*#__PURE__*/_jsx(SubmitGuessButton,{}):'',/*#__PURE__*/_jsx(ResetGameButton,{resetGame:resetGame}),/*#__PURE__*/_jsx(Link,{to:\"/home\",className:\"btn btn-primary\",onClick:resetGame,children:\"Home\"})]}),/*#__PURE__*/_jsx(OpenStreetCam,{reset:reset})]});}export default Game;","map":{"version":3,"names":["React","useContext","useEffect","useState","ImageDisplay","ImageContext","MapComponent","MapCoordinatesContext","haversine","OpenStreetCam","SubmitGuessButton","GameContext","ScoreDisplay","Link","ResetGameButton","jsx","_jsx","jsxs","_jsxs","Game","console","log","coordinates","setCoordinates","imageInfo","setImageInfo","gameInfo","setGameInfo","reset","setReset","resetGame","currentGameInfo","name","newGameInfo","dist","lat","lng","distance","latImg","lngImg","score","Math","round","className","children","style","display","justifyContent","to","onClick"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kölnguessr/cologneguessr/src/game.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport './css/game.css';\r\nimport ImageDisplay from './components/imageViewer';\r\nimport ImageContext from './contexts/imageContext';\r\nimport MapComponent from './components/map/mapComponent';\r\nimport MapCoordinatesContext from './contexts/mapContext';\r\nimport haversine from './components/haversine';\r\nimport OpenStreetCam from './components/openstreetcam';\r\nimport SubmitGuessButton from './components/submitGuessButton';\r\nimport GameContext from './contexts/gameContext';\r\nimport ScoreDisplay from './components/ScoreDisplay';\r\nimport { Link } from 'react-router-dom';\r\nimport ResetGameButton from './components/resetGameButton';\r\n\r\nfunction Game() {\r\n    console.log('Game');\r\n    const { coordinates, setCoordinates } = React.useContext(MapCoordinatesContext);\r\n    const { imageInfo, setImageInfo } = useContext(ImageContext);\r\n    const { gameInfo, setGameInfo } = useContext(GameContext);\r\n    const [reset, setReset] = useState(false);\r\n\r\n\r\n    function resetGame() {\r\n        setCoordinates(null);\r\n        // lösche alle Daten aus gameInfo, außer name\r\n        const currentGameInfo = {...gameInfo};\r\n        setGameInfo({name: currentGameInfo.name});\r\n        setImageInfo(null);\r\n        // lade neues Bild\r\n        setReset(!reset);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(coordinates && imageInfo) {\r\n            const newGameInfo = {...gameInfo};\r\n            const dist = haversine(coordinates.lat, coordinates.lng, imageInfo[1], imageInfo[2]);\r\n            newGameInfo.distance = dist;\r\n            newGameInfo.lat = coordinates.lat;\r\n            newGameInfo.lng = coordinates.lng;\r\n            newGameInfo.latImg = imageInfo[1];\r\n            newGameInfo.lngImg = imageInfo[2];\r\n            newGameInfo.score = Math.round(1000 - dist * 100);\r\n            setGameInfo(newGameInfo);\r\n        }\r\n    }, [coordinates, imageInfo]); // Effekt wird nur ausgeführt, wenn sich coordinates oder imageInfo ändern\r\n    \r\n    return (\r\n        <div className='gameContainer'>\r\n            <h1>KölnGuesser</h1>\r\n            <MapComponent />\r\n            <ScoreDisplay />\r\n            <ImageDisplay />\r\n\r\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                {coordinates ? <SubmitGuessButton /> : ''}\r\n                <ResetGameButton resetGame={resetGame} />\r\n                <Link to='/home' className='btn btn-primary' onClick={resetGame}>Home</Link>\r\n            </div>\r\n            <OpenStreetCam reset={reset} />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Game;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}