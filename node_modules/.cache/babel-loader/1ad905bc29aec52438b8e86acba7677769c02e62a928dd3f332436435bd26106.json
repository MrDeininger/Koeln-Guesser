{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext, useEffect } from 'react';\nimport ImageContext from \"../contexts/imageContext\";\nimport ScoreContext from '../contexts/scoreContext';\nfunction OpenStreetCam() {\n  _s();\n  const {\n    imageInfo,\n    setImageInfo\n  } = useContext(ImageContext);\n  const {\n    scoreInfo\n  } = useContext(ScoreContext);\n  const getRandomCoordinates = () => {\n    // Define the latitude and longitude boundaries of the rectangle\n    const latMin = 50.9100;\n    const latMax = 50.9600;\n    const lngMin = 6.89516;\n    const lngMax = 7.06372;\n\n    // Generate a random latitude and longitude within the rectangle\n    const lat = Math.random() * (latMax - latMin) + latMin;\n    const lng = Math.random() * (lngMax - lngMin) + lngMin;\n    return [lat, lng];\n  };\n  const getClosestImage = async (lat, lng) => {\n    fetch(`https://api.openstreetcam.org/2.0/photo/?lat=${lat}&lng=${lng}&radius=500`).then(response => {\n      if (!response.ok) throw new Error(\"No image found\");\n      return response.json();\n    }).then(data => {\n      if (data.result) {\n        let numberOfImages = data.result.data.length;\n        console.log(`Found ${numberOfImages} images.`);\n        if (numberOfImages > 0) {\n          const randomIndex = Math.floor(Math.random() * (numberOfImages - 1));\n          const randomPhoto = data.result.data[randomIndex];\n          setImageInfo([randomPhoto.fileurlProc, randomPhoto.lat, randomPhoto.lng]);\n        }\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n  useEffect(() => {\n    // Define the latitude and longitude boundaries of the rectangle\n    const latlng = getRandomCoordinates();\n    getClosestImage(latlng[0], latlng[1]);\n    return null; // or return your JSX here\n  }, [scoreInfo]); // Run effect when scoreInfo changes\n}\n_s(OpenStreetCam, \"3WYrUPSCyvc3v9WZmSKlENB1Lkw=\");\n_c = OpenStreetCam;\nexport default OpenStreetCam;\nvar _c;\n$RefreshReg$(_c, \"OpenStreetCam\");","map":{"version":3,"names":["useContext","useEffect","ImageContext","ScoreContext","OpenStreetCam","_s","imageInfo","setImageInfo","scoreInfo","getRandomCoordinates","latMin","latMax","lngMin","lngMax","lat","Math","random","lng","getClosestImage","fetch","then","response","ok","Error","json","data","result","numberOfImages","length","console","log","randomIndex","floor","randomPhoto","fileurlProc","catch","error","latlng","_c","$RefreshReg$"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kÃ¶lnguessr/cologneguessr/src/components/openstreetcam.js"],"sourcesContent":["import { useContext, useEffect } from 'react';\r\nimport ImageContext from \"../contexts/imageContext\";\r\nimport ScoreContext from '../contexts/scoreContext';\r\n\r\nfunction OpenStreetCam() {\r\n    const { imageInfo,  setImageInfo } = useContext(ImageContext);\r\n    const { scoreInfo } = useContext(ScoreContext);\r\n\r\n    const getRandomCoordinates = () => {\r\n        // Define the latitude and longitude boundaries of the rectangle\r\n        const latMin = 50.9100;\r\n        const latMax = 50.9600;\r\n        const lngMin = 6.89516;\r\n        const lngMax = 7.06372;\r\n\r\n        // Generate a random latitude and longitude within the rectangle\r\n        const lat = Math.random() * (latMax - latMin) + latMin;\r\n        const lng = Math.random() * (lngMax - lngMin) + lngMin;\r\n\r\n        return [lat, lng];\r\n    }\r\n\r\n    const getClosestImage = async (lat, lng) => {\r\n        fetch(\r\n            `https://api.openstreetcam.org/2.0/photo/?lat=${lat}&lng=${lng}&radius=500`\r\n        )\r\n            .then((response) => {\r\n                if(!response.ok) throw new Error(\"No image found\");\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                if(data.result){\r\n\r\n                    let numberOfImages = data.result.data.length;\r\n                    console.log(`Found ${numberOfImages} images.`);\r\n                    if (numberOfImages > 0) {\r\n                        const randomIndex = Math.floor(Math.random() * (numberOfImages -1));\r\n                        const randomPhoto = data.result.data[randomIndex];\r\n                        setImageInfo([randomPhoto.fileurlProc, randomPhoto.lat, randomPhoto.lng]);\r\n                    }\r\n                } \r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        // Define the latitude and longitude boundaries of the rectangle\r\n        const latlng = getRandomCoordinates();\r\n        getClosestImage(latlng[0], latlng[1]);\r\n        \r\n    return null; // or return your JSX here\r\n    }, [scoreInfo]); // Run effect when scoreInfo changes\r\n}\r\nexport default OpenStreetCam;"],"mappings":";AAAA,SAASA,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7C,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,YAAY,MAAM,0BAA0B;AAEnD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM;IAAEC,SAAS;IAAGC;EAAa,CAAC,GAAGP,UAAU,CAACE,YAAY,CAAC;EAC7D,MAAM;IAAEM;EAAU,CAAC,GAAGR,UAAU,CAACG,YAAY,CAAC;EAE9C,MAAMM,oBAAoB,GAAGA,CAAA,KAAM;IAC/B;IACA,MAAMC,MAAM,GAAG,OAAO;IACtB,MAAMC,MAAM,GAAG,OAAO;IACtB,MAAMC,MAAM,GAAG,OAAO;IACtB,MAAMC,MAAM,GAAG,OAAO;;IAEtB;IACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIL,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IACtD,MAAMO,GAAG,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIH,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IAEtD,OAAO,CAACE,GAAG,EAAEG,GAAG,CAAC;EACrB,CAAC;EAED,MAAMC,eAAe,GAAG,MAAAA,CAAOJ,GAAG,EAAEG,GAAG,KAAK;IACxCE,KAAK,CACA,gDAA+CL,GAAI,QAAOG,GAAI,aACnE,CAAC,CACIG,IAAI,CAAEC,QAAQ,IAAK;MAChB,IAAG,CAACA,QAAQ,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;MAClD,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACZ,IAAGA,IAAI,CAACC,MAAM,EAAC;QAEX,IAAIC,cAAc,GAAGF,IAAI,CAACC,MAAM,CAACD,IAAI,CAACG,MAAM;QAC5CC,OAAO,CAACC,GAAG,CAAE,SAAQH,cAAe,UAAS,CAAC;QAC9C,IAAIA,cAAc,GAAG,CAAC,EAAE;UACpB,MAAMI,WAAW,GAAGhB,IAAI,CAACiB,KAAK,CAACjB,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIW,cAAc,GAAE,CAAC,CAAC,CAAC;UACnE,MAAMM,WAAW,GAAGR,IAAI,CAACC,MAAM,CAACD,IAAI,CAACM,WAAW,CAAC;UACjDxB,YAAY,CAAC,CAAC0B,WAAW,CAACC,WAAW,EAAED,WAAW,CAACnB,GAAG,EAAEmB,WAAW,CAAChB,GAAG,CAAC,CAAC;QAC7E;MACJ;IACJ,CAAC,CAAC,CACDkB,KAAK,CAAEC,KAAK,IAAK;MACdP,OAAO,CAACC,GAAG,CAACM,KAAK,CAAC;IACtB,CAAC,CAAC;EACV,CAAC;EAGDnC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMoC,MAAM,GAAG5B,oBAAoB,CAAC,CAAC;IACrCS,eAAe,CAACmB,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;IAEzC,OAAO,IAAI,CAAC,CAAC;EACb,CAAC,EAAE,CAAC7B,SAAS,CAAC,CAAC,CAAC,CAAC;AACrB;AAACH,EAAA,CAnDQD,aAAa;AAAAkC,EAAA,GAAblC,aAAa;AAoDtB,eAAeA,aAAa;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}