{"ast":null,"code":"var _jsxFileName = \"C:\\\\_Code\\\\WEB2\\\\Abgabe Final Huge\\\\k\\xF6lnguessr\\\\cologneguessr\\\\src\\\\components\\\\map\\\\lineBetweenMarkers.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Polyline } from 'react-leaflet';\nimport { useContext } from 'react';\nimport MapCoordinatesContext from '../../contexts/mapContext';\nimport ImageContext from '../../contexts/imageContext';\nimport GameContext from '../../contexts/gameContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineBetweenMarkers() {\n  _s();\n  ;\n  const {\n    coordinates\n  } = useContext(MapCoordinatesContext);\n  const {\n    imageInfo\n  } = useContext(ImageContext);\n  const {\n    gameInfo\n  } = useContext(GameContext);\n  const [markerPosition, setMarkerPosition] = useState(null);\n  const [marker2Position, setMarker2Position] = useState(null);\n\n  // useEffect hook to update the Marker position whenever the imageInfo changes\n  useEffect(() => {\n    // This code will run whenever `imageInfo` changes\n\n    if (gameInfo && gameInfo.eingeloggt) {\n      setMarkerPosition([imageInfo[1], imageInfo[2]]);\n      setMarker2Position([coordinates.lat, coordinates.lng]);\n    }\n  }, [gameInfo]); // The array of dependencies for the useEffect hook. Whenever any of these change, the effect will run again.\n\n  if (imageInfo === null || coordinates === null) return null;\n  const line = [marker1Position, marker2Position];\n  return /*#__PURE__*/_jsxDEV(Polyline, {\n    positions: line,\n    color: \"red\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n_s(LineBetweenMarkers, \"Np7xWYoescl0ty7HlL50Y8vrZP0=\");\n_c = LineBetweenMarkers;\nexport default LineBetweenMarkers;\nvar _c;\n$RefreshReg$(_c, \"LineBetweenMarkers\");","map":{"version":3,"names":["React","useEffect","useState","Polyline","useContext","MapCoordinatesContext","ImageContext","GameContext","jsxDEV","_jsxDEV","LineBetweenMarkers","_s","coordinates","imageInfo","gameInfo","markerPosition","setMarkerPosition","marker2Position","setMarker2Position","eingeloggt","lat","lng","line","marker1Position","positions","color","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kÃ¶lnguessr/cologneguessr/src/components/map/lineBetweenMarkers.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Polyline } from 'react-leaflet';\r\nimport { useContext } from 'react';\r\nimport MapCoordinatesContext from '../../contexts/mapContext';\r\nimport ImageContext from '../../contexts/imageContext';\r\nimport GameContext from '../../contexts/gameContext';\r\n\r\n\r\n\r\n\r\nfunction LineBetweenMarkers( ) {\r\n;\r\n    const { coordinates } = useContext(MapCoordinatesContext);\r\n    const { imageInfo } = useContext(ImageContext);\r\n    const { gameInfo } = useContext(GameContext);\r\n    const [markerPosition, setMarkerPosition] = useState(null);\r\n    const [marker2Position, setMarker2Position] = useState(null);\r\n\r\n    \r\n    \r\n    // useEffect hook to update the Marker position whenever the imageInfo changes\r\n    useEffect(() => {\r\n        // This code will run whenever `imageInfo` changes\r\n        \r\n        if ( gameInfo && gameInfo.eingeloggt ) {\r\n            setMarkerPosition([imageInfo[1], imageInfo[2]]);\r\n            setMarker2Position([coordinates.lat, coordinates.lng]);\r\n        }\r\n        \r\n    }, [gameInfo]); // The array of dependencies for the useEffect hook. Whenever any of these change, the effect will run again.\r\n    \r\n    if(imageInfo === null || coordinates === null) return null;\r\n    const line = [marker1Position, marker2Position];\r\n    \r\n    return (\r\n        <Polyline positions={line} color='red' />\r\n    );\r\n}\r\n\r\nexport default LineBetweenMarkers;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,qBAAqB,MAAM,2BAA2B;AAC7D,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,WAAW,MAAM,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAKrD,SAASC,kBAAkBA,CAAA,EAAI;EAAAC,EAAA;EAC/B;EACI,MAAM;IAAEC;EAAY,CAAC,GAAGR,UAAU,CAACC,qBAAqB,CAAC;EACzD,MAAM;IAAEQ;EAAU,CAAC,GAAGT,UAAU,CAACE,YAAY,CAAC;EAC9C,MAAM;IAAEQ;EAAS,CAAC,GAAGV,UAAU,CAACG,WAAW,CAAC;EAC5C,MAAM,CAACQ,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAI5D;EACAD,SAAS,CAAC,MAAM;IACZ;;IAEA,IAAKa,QAAQ,IAAIA,QAAQ,CAACK,UAAU,EAAG;MACnCH,iBAAiB,CAAC,CAACH,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC/CK,kBAAkB,CAAC,CAACN,WAAW,CAACQ,GAAG,EAAER,WAAW,CAACS,GAAG,CAAC,CAAC;IAC1D;EAEJ,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,IAAGD,SAAS,KAAK,IAAI,IAAID,WAAW,KAAK,IAAI,EAAE,OAAO,IAAI;EAC1D,MAAMU,IAAI,GAAG,CAACC,eAAe,EAAEN,eAAe,CAAC;EAE/C,oBACIR,OAAA,CAACN,QAAQ;IAACqB,SAAS,EAAEF,IAAK;IAACG,KAAK,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEjD;AAAClB,EAAA,CA3BQD,kBAAkB;AAAAoB,EAAA,GAAlBpB,kBAAkB;AA6B3B,eAAeA,kBAAkB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}