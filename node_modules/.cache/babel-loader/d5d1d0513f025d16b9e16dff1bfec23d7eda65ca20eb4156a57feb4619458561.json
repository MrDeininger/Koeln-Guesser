{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useContext } from \"react\";\nimport ImageContext from \"../contexts/imageContext\";\nfunction FetchImage({\n  reset\n}) {\n  _s();\n  const {\n    imageInfo,\n    setImageInfo\n  } = useContext(ImageContext);\n  const getRandomCoordinates = () => {\n    // Define the latitude and longitude boundaries of the rectangle\n    const latMin = 50.89588741;\n    const latMax = 50.99128564;\n    const lngMin = 6.87332153;\n    const lngMax = 7.02060699;\n\n    // Generate a random latitude and longitude within the rectangle\n    const lat = Math.random() * (latMax - latMin) + latMin;\n    const lng = Math.random() * (lngMax - lngMin) + lngMin;\n    return [lat, lng];\n  };\n  const latlng = getRandomCoordinates();\n  fetch(`https://api.openstreetcam.org/2.0/photo/?lat=${latlng[0]}&lng=${latlng[1]}&radius=500`).then(response => {\n    if (!response.ok) throw new Error(\"No image found\");\n    return response.json();\n  }).then(data => {\n    if (data.result && data.result.data && data.result.data.length > randomIndex) {\n      let numberOfImages = data.result.data.length;\n      const randomIndex = Math.floor(Math.random() * (numberOfImages - 1));\n      const randomPhoto = data.result.data[randomIndex];\n      setImageInfo([randomPhoto.fileurlProc, randomPhoto.lat, randomPhoto.lng]);\n    } else {\n      console.log('No images found.');\n      FetchImage();\n    }\n  }).catch(error => {\n    console.log(error);\n  });\n}\n_s(FetchImage, \"BDfCsY9z1QrCch3sEcZtp7uE0LE=\");\n_c = FetchImage;\nexport default FetchImage;\nvar _c;\n$RefreshReg$(_c, \"FetchImage\");","map":{"version":3,"names":["useContext","ImageContext","FetchImage","reset","_s","imageInfo","setImageInfo","getRandomCoordinates","latMin","latMax","lngMin","lngMax","lat","Math","random","lng","latlng","fetch","then","response","ok","Error","json","data","result","length","randomIndex","numberOfImages","floor","randomPhoto","fileurlProc","console","log","catch","error","_c","$RefreshReg$"],"sources":["C:/_Code/WEB2/Abgabe Final Huge/kÃ¶lnguessr/cologneguessr/src/components/fetchImage.js"],"sourcesContent":["import { useContext } from \"react\";\r\nimport ImageContext from \"../contexts/imageContext\";\r\n\r\n\r\nfunction FetchImage({ reset }) {\r\n  const { imageInfo, setImageInfo } = useContext(ImageContext);\r\n\r\n  const getRandomCoordinates = () => {\r\n    // Define the latitude and longitude boundaries of the rectangle\r\n    const latMin = 50.89588741;\r\n    const latMax = 50.99128564;\r\n    const lngMin = 6.87332153;\r\n    const lngMax = 7.02060699;\r\n\r\n    // Generate a random latitude and longitude within the rectangle\r\n    const lat = Math.random() * (latMax - latMin) + latMin;\r\n    const lng = Math.random() * (lngMax - lngMin) + lngMin;\r\n\r\n    return [lat, lng];\r\n  };\r\n\r\n    const latlng = getRandomCoordinates();\r\n\r\n    fetch(\r\n      `https://api.openstreetcam.org/2.0/photo/?lat=${latlng[0]}&lng=${latlng[1]}&radius=500`\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) throw new Error(\"No image found\");\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.result && data.result.data && data.result.data.length > randomIndex) {\r\n            let numberOfImages = data.result.data.length;\r\n            const randomIndex = Math.floor(\r\n              Math.random() * (numberOfImages - 1)\r\n            );\r\n            const randomPhoto = data.result.data[randomIndex];\r\n            setImageInfo([\r\n                randomPhoto.fileurlProc,\r\n                randomPhoto.lat,\r\n                randomPhoto.lng,\r\n            ]);\r\n        } else {\r\n          console.log('No images found.');\r\n            FetchImage();\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      }\r\n    );\r\n}\r\n\r\nexport default FetchImage;\r\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,YAAY,MAAM,0BAA0B;AAGnD,SAASC,UAAUA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAAAC,EAAA;EAC7B,MAAM;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGN,UAAU,CAACC,YAAY,CAAC;EAE5D,MAAMM,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACA,MAAMC,MAAM,GAAG,WAAW;IAC1B,MAAMC,MAAM,GAAG,WAAW;IAC1B,MAAMC,MAAM,GAAG,UAAU;IACzB,MAAMC,MAAM,GAAG,UAAU;;IAEzB;IACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIL,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IACtD,MAAMO,GAAG,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIH,MAAM,GAAGD,MAAM,CAAC,GAAGA,MAAM;IAEtD,OAAO,CAACE,GAAG,EAAEG,GAAG,CAAC;EACnB,CAAC;EAEC,MAAMC,MAAM,GAAGT,oBAAoB,CAAC,CAAC;EAErCU,KAAK,CACF,gDAA+CD,MAAM,CAAC,CAAC,CAAE,QAAOA,MAAM,CAAC,CAAC,CAAE,aAC7E,CAAC,CACEE,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gBAAgB,CAAC;IACnD,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;IACd,IAAIA,IAAI,CAACC,MAAM,IAAID,IAAI,CAACC,MAAM,CAACD,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACD,IAAI,CAACE,MAAM,GAAGC,WAAW,EAAE;MAC1E,IAAIC,cAAc,GAAGJ,IAAI,CAACC,MAAM,CAACD,IAAI,CAACE,MAAM;MAC5C,MAAMC,WAAW,GAAGb,IAAI,CAACe,KAAK,CAC5Bf,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIa,cAAc,GAAG,CAAC,CACrC,CAAC;MACD,MAAME,WAAW,GAAGN,IAAI,CAACC,MAAM,CAACD,IAAI,CAACG,WAAW,CAAC;MACjDpB,YAAY,CAAC,CACTuB,WAAW,CAACC,WAAW,EACvBD,WAAW,CAACjB,GAAG,EACfiB,WAAW,CAACd,GAAG,CAClB,CAAC;IACN,CAAC,MAAM;MACLgB,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC7B9B,UAAU,CAAC,CAAC;IAChB;EACF,CAAC,CAAC,CACD+B,KAAK,CAAEC,KAAK,IAAK;IAChBH,OAAO,CAACC,GAAG,CAACE,KAAK,CAAC;EACpB,CACF,CAAC;AACL;AAAC9B,EAAA,CA/CQF,UAAU;AAAAiC,EAAA,GAAVjC,UAAU;AAiDnB,eAAeA,UAAU;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}